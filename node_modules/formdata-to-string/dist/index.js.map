{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport { isErrored as streamIsErrored } from 'node:stream';\nimport { inspect } from 'node:util';\n\ninterface Options {\n  /**\n   * A custom boundary to use in your generated FormData string. Will default to an internal\n   * `undici` identifying boundary if not supplied.\n   */\n  boundary?: string;\n}\n\n/**\n * @see {@link https://stackoverflow.com/a/63361543/105698}\n */\nasync function streamToString(data) {\n  const chunks = [];\n\n  for await (const chunk of data) {\n    chunks.push(Buffer.from(chunk));\n  }\n\n  return Buffer.concat(chunks).toString('utf-8');\n}\n\n/**\n * @license https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/LICENSE\n * @see {@link https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/lib/core/util.js#L333C1-L339C2}\n */\nfunction isErrored(body) {\n  return !!(body && (streamIsErrored ? streamIsErrored(body) : /state: 'errored'/.test(inspect(body))));\n}\n\n/**\n * @license https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/LICENSE\n * @see {@link https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/lib/core/util.js#L279-L282}\n */\nfunction isBuffer(buffer) {\n  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n}\n\n/**\n * This is a paired down version of the `extractBody` function in `undici` that can convert a\n * `FormData` instance into a stream object that can be easily read out of.\n *\n * @license https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/LICENSE\n * @see {@link https://github.com/nodejs/undici/blob/e39a6324c4474c6614cac98b8668e3d036aa6b18/lib/fetch/body.js#L31}\n */\nfunction extractBody(object, opts?: Options) {\n  let source = null;\n  let length = null;\n\n  const boundary = opts?.boundary\n    ? opts.boundary\n    : `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;\n  const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`;\n\n  /*! formdata-polyfill. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */\n  const escape = (str: string) => str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22');\n  const normalizeLinefeeds = (value: string) => value.replace(/\\r?\\n|\\r/g, '\\r\\n');\n\n  const enc = new TextEncoder();\n  const blobParts = [];\n  const rn = new Uint8Array([13, 10]); // '\\r\\n'\n  length = 0;\n  let hasUnknownSizeValue = false;\n\n  for (const [name, value] of object) {\n    if (typeof value === 'string') {\n      const chunk = enc.encode(\n        `${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`,\n      );\n      blobParts.push(chunk);\n      length += chunk.byteLength;\n    } else {\n      const chunk = enc.encode(\n        `${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"${\n          value.name ? `; filename=\"${escape(value.name)}\"` : ''\n        }\\r\\nContent-Type: ${value.type || 'application/octet-stream'}\\r\\n\\r\\n`,\n      );\n      blobParts.push(chunk, value, rn);\n      if (typeof value.size === 'number') {\n        length += chunk.byteLength + value.size + rn.byteLength;\n      } else {\n        hasUnknownSizeValue = true;\n      }\n    }\n  }\n\n  const chunk = enc.encode(`--${boundary}--`);\n  blobParts.push(chunk);\n  length += chunk.byteLength;\n  if (hasUnknownSizeValue) {\n    length = null;\n  }\n\n  source = object;\n\n  // eslint-disable-next-line func-names\n  const action = async function* () {\n    for (const part of blobParts) {\n      if (part.stream) {\n        yield* part.stream();\n      } else {\n        yield part;\n      }\n    }\n  };\n\n  const type = `multipart/form-data; boundary=${boundary}`;\n\n  if (typeof source === 'string' || isBuffer(source)) {\n    length = Buffer.byteLength(source);\n  }\n\n  let iterator;\n  const stream = new ReadableStream({\n    async start() {\n      iterator = action()[Symbol.asyncIterator]();\n    },\n    // @ts-expect-error Typings are off but this works.\n    async pull(controller) {\n      const { value, done } = await iterator.next();\n      if (done) {\n        queueMicrotask(() => {\n          controller.close();\n        });\n      } else if (!isErrored(stream)) {\n        controller.enqueue(new Uint8Array(value));\n      }\n      return controller.desiredSize > 0;\n    },\n    async cancel() {\n      await iterator.return();\n    },\n    type: undefined,\n  });\n\n  return {\n    body: {\n      stream,\n      source,\n      length,\n    },\n    type,\n  };\n}\n\n/**\n * Convert an instance of the `FormData` API into a raw string.\n *\n */\nexport default async function formDataToString(form: FormData, opts: Options = {}) {\n  const {\n    body: { stream },\n  } = await extractBody(form, opts);\n\n  return streamToString(stream);\n}\n"],"mappings":"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","names":["chunk"]}